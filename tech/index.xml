<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on Louis Lefebvre (✿◠‿◠)</title><link>https://louislefebvre.net/tech/</link><description>Recent content in Tech on Louis Lefebvre (✿◠‿◠)</description><generator>Hugo</generator><language>en-us</language><managingEditor>louislefebvre1999@gmail.com (Louis Lefebvre)</managingEditor><webMaster>louislefebvre1999@gmail.com (Louis Lefebvre)</webMaster><copyright>2023 Louis LeFebvre</copyright><lastBuildDate>Mon, 23 Jun 2025 22:49:56 -0500</lastBuildDate><atom:link href="https://louislefebvre.net/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>June Update</title><link>https://louislefebvre.net/tech/june-update/</link><pubDate>Mon, 23 Jun 2025 22:49:56 -0500</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/june-update/</guid><description>&lt;p>So another portfolio website?&lt;/p>
&lt;p>At work, I&amp;rsquo;ve been forced into supporting our stabilization of &lt;a href="https://backstage.io/">Backstage&lt;/a>,
which means that I had to learn frontend development and all the best practices
without given the time to do so. I&amp;rsquo;ve simultaneously had to learn practical
kafka streaming and Spring Boot(why can&amp;rsquo;t we just move to Go microservices?), so
my learning of all the Backstage dependencies has been a little&amp;hellip; slow.&lt;/p>
&lt;p>The new tech stack includes:&lt;/p></description></item><item><title>Improving My C Build System with Zig</title><link>https://louislefebvre.net/tech/zig-gcc-replace/</link><pubDate>Tue, 20 May 2025 10:18:34 -0500</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/zig-gcc-replace/</guid><description>&lt;p>Since I&amp;rsquo;ve been messing around with &lt;a href="https://ziglang.org/">zig&lt;/a> recently, I decided one of the
simplest ways for me to work with zig is to integrate it into one of my existing
C project by &lt;a href="https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html">replacing gcc/clang with zig&lt;/a>. Even though zig has a bunch of
additional features that clang does not, we will keep it simple and just
restructure clang as-is and work on improvements later.&lt;/p>
&lt;h2 id="current-sitch">Current Sitch&lt;/h2>
&lt;p>The C project I&amp;rsquo;ll be improving is my &lt;a href="https://github.com/louislef299/shell">custom shell&lt;/a> that I wrote in college.
It uses memory emulation, so it isn&amp;rsquo;t fully functional, but it definitely could
use the improvement!&lt;/p></description></item><item><title>An Introduction to Modern LLMs</title><link>https://louislefebvre.net/tech/llm-learning/</link><pubDate>Sat, 17 May 2025 11:09:21 -0500</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/llm-learning/</guid><description>&lt;p>Alright, I&amp;rsquo;ve been putting this off for a while now, mostly because I believe
that a lot of the AI hype is over-blown, but because I am a part of the
proletariat, I do need to keep my skills sharp according to the industry. Not
necessarily what I believe. This will be a part of a series where I will be
going over LLMs, CSI Block Projection and RAFT.&lt;/p>
&lt;p>Conceptually, I understand each from a high level, but my goal is to get from
theoretical and conceptual knowledge to more practical and hands-on knowledge as
this is the true path to learning. Before I can get to practical knowledge,
however, I need to lay a solid foundation of understanding, so today I am
starting off with understanding modern LLMs.&lt;/p></description></item><item><title>May Update</title><link>https://louislefebvre.net/tech/may-update/</link><pubDate>Tue, 06 May 2025 14:14:51 -0500</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/may-update/</guid><description>&lt;p>Just a small update. At work, things have been a little hectic with trying to
balance getting actual work done while massaging different egos. Anyways, most
of the work that I&amp;rsquo;ve laid down is ready for somebody to take action on, but
I&amp;rsquo;ve decided to focus more on my side projects in my free time for now.&lt;/p>
&lt;p>So, an update on some of my bluetooth programming: since the Go DBus programming
has been a grind and I would have to basically invent a whole new library just
to work with it, I&amp;rsquo;ve decided that I should move back to a more naturally
embedded language. This decision came with the realization that I would likely
want more control over my application code when working with bluetooth to make
it more performant and reliable.&lt;/p></description></item><item><title>Getting Started with DBus</title><link>https://louislefebvre.net/tech/learn-dbus/</link><pubDate>Sun, 05 Jan 2025 12:26:41 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/learn-dbus/</guid><description>&lt;p>Alright, so in the past, I had gotten low enough to the system level with BlueZ
that I had pondered learning the basics of DBus(&lt;a href="https://louislefebvre.net/tech/containerized-bluetooth/">containerized ble&lt;/a>). After working a bit with the popular
Go bluetooth pkg from tinygo, I was having some problems with it and not getting
quite getting it to work how I wanted it to, so looks like I get to learn about
DBus to help with debugging and potentially reimplement my own bluetooth Go pkg.&lt;/p></description></item><item><title>Minecraft Server</title><link>https://louislefebvre.net/tech/minecraft-server/</link><pubDate>Sat, 04 Jan 2025 12:52:04 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/minecraft-server/</guid><description>&lt;p>Alright, recently my friends and I wanted to start up a new Minecraft world, and
I got challened to host my own server. It wound up being super easy and I&amp;rsquo;m just
going to go over how I configured the server and any other notes here.&lt;/p>
&lt;h2 id="about-the-setup">About the Setup&lt;/h2>
&lt;p>To allow all of my friends to access the local server, I gave them access to my
&lt;a href="https://tailscale.com/kb/1136/tailnet">tailnet&lt;/a>. It works super slick for now, but I had to upgrade to the &lt;a href="https://tailscale.com/pricing?plan=personal">personal
plus plan&lt;/a> and fork over the extra $6 for this first month. Long-term, I&amp;rsquo;m
going to setup an OpenVPN on my network so that I can get around this and
surpass my 6 user limit.&lt;/p></description></item><item><title>Building a Custom BLE Service in Go</title><link>https://louislefebvre.net/tech/go-ble-custom-service/</link><pubDate>Mon, 30 Dec 2024 14:03:17 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/go-ble-custom-service/</guid><description>&lt;p>In this article we will be creating a custom Bluetooth Service in Go. I&amp;rsquo;ll be
walking through the &lt;a href="https://novelbits.io/bluetooth-gatt-services-characteristics/">NovelBits article&lt;/a> and use the &lt;a href="https://pkg.go.dev/tinygo.org/x/bluetooth">tinygo pkg&lt;/a>.
The requirements I have for my current project require a custom Bluetooth
Service as none of the pre-defined services from &lt;a href="https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Assigned_Numbers/out/en/Assigned_Numbers.pdf?v=1735501678042">Bluetooth SIG&lt;/a> cover my use
case.&lt;/p>
&lt;h2 id="about-services">About Services&lt;/h2>
&lt;p>In the past, I had &lt;a href="https://louislefebvre.net/tech/simple-bluetooth/#notes-on-gatt">gone over bluetooth services and characteristics&lt;/a>, so I
understand services from a high level, but good to go over it quickly.&lt;/p></description></item><item><title>Exploring Dual Bluetooth Roles on One Device</title><link>https://louislefebvre.net/tech/containerized-bluetooth/</link><pubDate>Sat, 28 Dec 2024 16:08:53 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/containerized-bluetooth/</guid><description>&lt;p>Today, I am going to attempt to &lt;a href="https://medium.com/omi-uulm/how-to-run-containerized-bluetooth-applications-with-bluez-dced9ab767f6">containerize a bluetooth application&lt;/a> using
Docker. I&amp;rsquo;ve been &lt;a href="https://louislefebvre.net/tech/simple-bluetooth/">learning about the bluetooth protocol using Go&lt;/a> and simply copy the Go Central code to my
raspberry pi and run it with Go and Bluez. It works, but it&amp;rsquo;s not easy to
transport since it typically requires the hard-coding of the wifi network into
the pi image. Since I travel around a lot, this should be more flexible and
allow me to publish the container so I can pull it down from any machine(that
runs a container runtime).&lt;/p></description></item><item><title>TCP/IP Basics</title><link>https://louislefebvre.net/tech/tcp-basics/</link><pubDate>Thu, 26 Dec 2024 13:18:58 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/tcp-basics/</guid><description>&lt;p>Just going over the &lt;a href="https://okanexe.medium.com/the-complete-guide-to-tcp-ip-connections-in-golang-1216dae27b5a">TCP/IP basics&lt;/a> here to build out a good foundation as I
continue my bluetooth journey. It never hurts to go over the basics, especially
since there are so many tools and libraries that try to simplify that process
for programmers.&lt;/p>
&lt;h2 id="tcp-basics">TCP Basics&lt;/h2>
&lt;p>A TCP server requires the following steps:&lt;/p>
&lt;ol>
&lt;li>Listen for Incoming Connections&lt;/li>
&lt;li>Accept Incoming Connections&lt;/li>
&lt;li>Handle Client Connections&lt;/li>
&lt;li>Read and Write Data&lt;/li>
&lt;li>Close the Connection&lt;/li>
&lt;/ol>
&lt;p>The client will:&lt;/p></description></item><item><title>Dependabot Auto-Merge</title><link>https://louislefebvre.net/tech/dependabot-merge-queue/</link><pubDate>Sun, 15 Dec 2024 09:32:18 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/dependabot-merge-queue/</guid><description>&lt;p>In this post, I&amp;rsquo;m just going to go through &lt;a href="https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions">automating dependabot updates&lt;/a> and
leveraging &lt;a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue">merge queue&lt;/a> so that I don&amp;rsquo;t have to mess around with rebasing and
conflicts. Hoping this will just work natively, but let&amp;rsquo;s try it out!&lt;/p>
&lt;p>The project I spend the most time keeping up-to-date is &lt;a href="https://github.com/louhttps://github.com/louislef299/aws-ssoislef299/aws-sso">aws-sso&lt;/a>, so this
should make my life easier by only needing to execute the release. Side note: I
really should write a doc on how to use that tool.&lt;/p></description></item><item><title>Simple Bluetooth Communication Using Go</title><link>https://louislefebvre.net/tech/simple-bluetooth/</link><pubDate>Sat, 07 Dec 2024 14:23:59 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/simple-bluetooth/</guid><description>&lt;p>Just going to go over communicating over bluetooth in Go. Over the summer, I had
spent some time learning the &lt;a href="https://learn.adafruit.com/introduction-to-bluetooth-low-energy/gap">basics of bluetooth&lt;/a> and made a super simple
central and peripheral example in Go. Summarizing those learnings here.&lt;/p>
&lt;p>Definitely go over the above link to help understand the rest of this quick
summary. I seem to frequently mess with bluetooth a bit and then don&amp;rsquo;t touch it
for an extended period of time, so this is mostly a reference document for me to
get a quick refresher on the basics until I spend significant time at the
embedded level. Honestly, I spend way more time at the infrastructure and server
level, so that comes more naturally to me.&lt;/p></description></item><item><title>Welcome</title><link>https://louislefebvre.net/tech/welcome/</link><pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/welcome/</guid><description>&lt;p>Alright so I&amp;rsquo;ve slimmed things down. Going to focus more on just keeping some
notes online about any research I do, travel and any other interests I have.
I&amp;rsquo;ve never really been great at writing, but it would be great to just have a
linear blog to keep track of everything I&amp;rsquo;ve been working on.&lt;/p>
&lt;p>Currently working at Medtronic as a platform engineer and have slowly evolved
into a jack-of-all-trades engineer with more of a pioneer&amp;rsquo;s mindset with
innovation and business/customer buy-in before industrialization and
stabilization.&lt;/p></description></item><item><title>Wireless Interface Information using nl80211/Arch Install</title><link>https://louislefebvre.net/tech/nl80211/</link><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/nl80211/</guid><description>&lt;p>Just copying this over from one of my previous projects. It goes over my
experience with low-level network programming using Linux network interfaces and
Go. Along the way, I was having issues battling &lt;a href="https://fedoraproject.org/wiki/Tools/NetworkManager">Network Manager&lt;/a> when I had
Fedora Linux installed, so I switched over to Arch and decided to just use
&lt;a href="https://wiki.archlinux.org/title/Iwd">iwd&lt;/a> instead. It has proven to be must better in my experience and
essentially remains out of the way.&lt;/p>
&lt;hr>
&lt;p>Guess what? Not a whole lot of documentation for nl80211! Yayyyyy :)&lt;/p></description></item><item><title>CCNA Journey - Introduction to TCP/IP Networking</title><link>https://louislefebvre.net/tech/ccna-chp1/</link><pubDate>Sun, 18 Feb 2024 14:17:49 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/ccna-chp1/</guid><description>&lt;p>Chapter 1 starts off with getting some initial perspectives on networking down
as a general introduction. This was all really review as they just talked about
the different ways and individual or enterprise connect to a network and through
which mediums.&lt;/p>
&lt;p>After an initial network introduction, the reading went into the TCP/IP
networking model and the history of the initial battle between the OSI model and
TCP/IP. The important historical value to note is that in the late 1970s and
early 1980s, the OSI model looked to be the model that would win out. That is
why you see lots of documentation still reference &amp;ldquo;Layer 7&amp;rdquo; protocols even
though the TCP/IP model won out and only technically has 5 layers.&lt;/p></description></item><item><title>Playground for Network Interfaces</title><link>https://louislefebvre.net/tech/network-interfaces/</link><pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/network-interfaces/</guid><description>&lt;p>Just messing around with network interfaces in an attempt to understand
some of the low-level OS fundamentals. I was led in this direction when
looking at Wireguard&amp;rsquo;s packages and getting a fun,system-level example of
how to run system calls and file descriptors to configure network interfaces
in Go.&lt;/p>
&lt;h2 id="wireguards-tun-interface">Wireguard&amp;rsquo;s TUN interface&lt;/h2>
&lt;p>Referenced code can be found &lt;a href="https://github.com/louislef299/go-scripts/blob/main/projects/network-interfaces/main.go">here&lt;/a>.&lt;/p>
&lt;h3 id="setting-up">Setting Up&lt;/h3>
&lt;p>The TUN interface is created at &lt;code>/dev/net/tun&lt;/code> and represents the tunnel
used to communicate with the external service. When running through
Cloudflare&amp;rsquo;s &lt;a href="https://blog.cloudflare.com/virtual-networking-101-understanding-tap/">Understanding TUN/TAP&lt;/a>, it made more sense that this TUN
device represented a local point-to-point connection with the Wireguard
service. Found this fun rhyme to remember the difference between the device
types:&lt;/p></description></item></channel></rss>