<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Louis Lefebvre (✿◠‿◠)</title><link>https://louislefebvre.net/tags/linux/</link><description>Recent content in Linux on Louis Lefebvre (✿◠‿◠)</description><generator>Hugo</generator><language>en-us</language><managingEditor>louislefebvre1999@gmail.com (Louis Lefebvre)</managingEditor><webMaster>louislefebvre1999@gmail.com (Louis Lefebvre)</webMaster><copyright>2023 Louis LeFebvre</copyright><lastBuildDate>Sun, 05 Jan 2025 12:26:41 -0600</lastBuildDate><atom:link href="https://louislefebvre.net/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started with DBus</title><link>https://louislefebvre.net/tech/learn-dbus/</link><pubDate>Sun, 05 Jan 2025 12:26:41 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/learn-dbus/</guid><description>&lt;p>Alright, so in the past, I had gotten low enough to the system level with BlueZ
that I had pondered learning the basics of DBus(&lt;a href="https://louislefebvre.net/tech/containerized-bluetooth/">containerized ble&lt;/a>). After working a bit with the popular
Go bluetooth pkg from tinygo, I was having some problems with it and not getting
quite getting it to work how I wanted it to, so looks like I get to learn about
DBus to help with debugging and potentially reimplement my own bluetooth Go pkg.&lt;/p></description></item><item><title>Minecraft Server</title><link>https://louislefebvre.net/tech/minecraft-server/</link><pubDate>Sat, 04 Jan 2025 12:52:04 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/minecraft-server/</guid><description>&lt;p>Alright, recently my friends and I wanted to start up a new Minecraft world, and
I got challened to host my own server. It wound up being super easy and I&amp;rsquo;m just
going to go over how I configured the server and any other notes here.&lt;/p>
&lt;h2 id="about-the-setup">About the Setup&lt;/h2>
&lt;p>To allow all of my friends to access the local server, I gave them access to my
&lt;a href="https://tailscale.com/kb/1136/tailnet">tailnet&lt;/a>. It works super slick for now, but I had to upgrade to the &lt;a href="https://tailscale.com/pricing?plan=personal">personal
plus plan&lt;/a> and fork over the extra $6 for this first month. Long-term, I&amp;rsquo;m
going to setup an OpenVPN on my network so that I can get around this and
surpass my 6 user limit.&lt;/p></description></item><item><title>Exploring Dual Bluetooth Roles on One Device</title><link>https://louislefebvre.net/tech/containerized-bluetooth/</link><pubDate>Sat, 28 Dec 2024 16:08:53 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/containerized-bluetooth/</guid><description>&lt;p>Today, I am going to attempt to &lt;a href="https://medium.com/omi-uulm/how-to-run-containerized-bluetooth-applications-with-bluez-dced9ab767f6">containerize a bluetooth application&lt;/a> using
Docker. I&amp;rsquo;ve been &lt;a href="https://louislefebvre.net/tech/simple-bluetooth/">learning about the bluetooth protocol using Go&lt;/a> and simply copy the Go Central code to my
raspberry pi and run it with Go and Bluez. It works, but it&amp;rsquo;s not easy to
transport since it typically requires the hard-coding of the wifi network into
the pi image. Since I travel around a lot, this should be more flexible and
allow me to publish the container so I can pull it down from any machine(that
runs a container runtime).&lt;/p></description></item><item><title>Simple Bluetooth Communication Using Go</title><link>https://louislefebvre.net/tech/simple-bluetooth/</link><pubDate>Sat, 07 Dec 2024 14:23:59 -0600</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/simple-bluetooth/</guid><description>&lt;p>Just going to go over communicating over bluetooth in Go. Over the summer, I had
spent some time learning the &lt;a href="https://learn.adafruit.com/introduction-to-bluetooth-low-energy/gap">basics of bluetooth&lt;/a> and made a super simple
central and peripheral example in Go. Summarizing those learnings here.&lt;/p>
&lt;p>Definitely go over the above link to help understand the rest of this quick
summary. I seem to frequently mess with bluetooth a bit and then don&amp;rsquo;t touch it
for an extended period of time, so this is mostly a reference document for me to
get a quick refresher on the basics until I spend significant time at the
embedded level. Honestly, I spend way more time at the infrastructure and server
level, so that comes more naturally to me.&lt;/p></description></item><item><title>Wireless Interface Information using nl80211/Arch Install</title><link>https://louislefebvre.net/tech/nl80211/</link><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/nl80211/</guid><description>&lt;p>Just copying this over from one of my previous projects. It goes over my
experience with low-level network programming using Linux network interfaces and
Go. Along the way, I was having issues battling &lt;a href="https://fedoraproject.org/wiki/Tools/NetworkManager">Network Manager&lt;/a> when I had
Fedora Linux installed, so I switched over to Arch and decided to just use
&lt;a href="https://wiki.archlinux.org/title/Iwd">iwd&lt;/a> instead. It has proven to be must better in my experience and
essentially remains out of the way.&lt;/p>
&lt;hr>
&lt;p>Guess what? Not a whole lot of documentation for nl80211! Yayyyyy :)&lt;/p></description></item><item><title>Playground for Network Interfaces</title><link>https://louislefebvre.net/tech/network-interfaces/</link><pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate><author>louislefebvre1999@gmail.com (Louis Lefebvre)</author><guid>https://louislefebvre.net/tech/network-interfaces/</guid><description>&lt;p>Just messing around with network interfaces in an attempt to understand
some of the low-level OS fundamentals. I was led in this direction when
looking at Wireguard&amp;rsquo;s packages and getting a fun,system-level example of
how to run system calls and file descriptors to configure network interfaces
in Go.&lt;/p>
&lt;h2 id="wireguards-tun-interface">Wireguard&amp;rsquo;s TUN interface&lt;/h2>
&lt;p>Referenced code can be found &lt;a href="https://github.com/louislef299/go-scripts/blob/main/projects/network-interfaces/main.go">here&lt;/a>.&lt;/p>
&lt;h3 id="setting-up">Setting Up&lt;/h3>
&lt;p>The TUN interface is created at &lt;code>/dev/net/tun&lt;/code> and represents the tunnel
used to communicate with the external service. When running through
Cloudflare&amp;rsquo;s &lt;a href="https://blog.cloudflare.com/virtual-networking-101-understanding-tap/">Understanding TUN/TAP&lt;/a>, it made more sense that this TUN
device represented a local point-to-point connection with the Wireguard
service. Found this fun rhyme to remember the difference between the device
types:&lt;/p></description></item></channel></rss>